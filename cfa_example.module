<?php
/**
 * @file
 * Main module file for the CfA example module.
 *
 * Main file for Drupal hooks.
 *
 * See Coding Standards, including documenting standards.
 * http://drupal.org/coding-standards
 *
 * Drupal API and compenent documentation.
 * http://api.drupal.org/api/drupal/7
 *
 * In depth articles on the Drupal API:
 * http://drupal.org/developing/api
 *
 * Drupal Hooks.  Drupal uses a system called "hooks" to allow 
 * modules to interact with the execution of the Drupal stack without
 * hacking the Drupal core code.  See the following API page:
 * http://api.drupal.org/api/drupal/includes--module.inc/group/hooks/7
 *
 * Database Abstraction Layer.  Drupal provides a database abstraction
 * layer that allows Drupal to be installed on different databases.
 * http://api.drupal.org/api/drupal/includes--database--database.inc/group/database/7
 * http://drupal.org/developing/api/database
 */
 
/**
 * Implements hook_help().
 * http://api.drupal.org/api/drupal/modules--help--help.api.php/function/hook_help/7
 */
function cfa_example_help($path, $arg) {
  // Note how the function is name: 
  // function <name-of-our-module>_<name-of-hook-without-the-word-hook>() {}

  switch ($path) {
    // Main module help for this module
    case 'admin/help#cfa_example':
      return '<p>' . t('The CfA Example module just provides some simple examples to help with presentation and teaching purposes.') . '</p>';

  }
}
 
/**
 * Implements hook_menu().
 * http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_menu/7
 *
 * Also see more docs on the menu system as a whole:
 * http://api.drupal.org/api/drupal/includes--menu.inc/group/menu/7
 *
 * Also see the Examples module menu_example for more in-depth examples.
 */
function cfa_example_menu() {
  $items = array();

  $items['cfa_example_page'] = array(
    'title' => 'CfA Example Page', 
    'description' => 'Use a description for things like hover stats on menu items.', 
    'page callback' => 'cfa_example_page_callback',
    'page arguments' => array('An argument'),
    'access arguments' => array('access content'), 
    'type' => MENU_NORMAL_ITEM,
  );

  $items['cfa_data_entry'] = array(
    'title' => 'CfA Data Entry', 
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cfa_example_data_entry'),
    'access arguments' => array('cfa example data entry'), 
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/**
 * Callback for the cfa_example menu item.
 *
 * @param $argument
 *   An argument passed form the menu hook.
 *
 * @return
 *   Output to the screen.
 */
function cfa_example_page_callback($argument = '') {
  $output = '';
  
  // Though the argument is not coming from a user, we will
  // use the check_plain function for security purposes.  Also
  // the t() function we use it in below can call this automatically.
  // http://api.drupal.org/api/drupal/includes--bootstrap.inc/function/check_plain/7
  $argument = check_plain($argument);
  
  // Some more output.  This also uses the very imporant t() function that
  // allows text to be translated:
  // http://api.drupal.org/api/drupal/includes--bootstrap.inc/function/t/7
  $theme_argument = t('This is some text and an example of the %function function with the argument from the menu item: %argument.', 
    array(
      '%function' => 't()',
      '%argument' => $argument,
    )
  );

  $output = theme('cfa_example_page_theme', array('theme_argument' => $theme_argument));
  
  return $output;
}
 
/**
 * Implements hook_theme().
 * http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_theme/7
 * http://api.drupal.org/api/drupal/modules--system--theme.api.php/group/themeable/7
 * http://drupal.org/node/933976
 * http://drupal.org/node/722174
 *
 * The Drupal Theme system is sort of similar to the hook system, but instead it is
 * a system of overrides.  By defining theme functions and call them in a specific way
 * it allows modules, and more importantly themes to override them to take control
 * of how output is created.
 *
 * The general rule is that any output that involves HTML needs to be put through
 * a theme function.
 */
function cfa_example_theme() {
  // We are defining a very basic item for theming.  It can be called
  // like the following:
  // $output = theme('cfa_example_page_theme', $theme_argument);
  //
  // The default theme function is defined below.
  //
  // To override this function, a theme could define a new function like
  // the following:
  // function themename_cfa_example_page_theme($theme_argument) {}
  return array(
    'cfa_example_page_theme' => array(
      'variables' => array('theme_argument' => NULL),
    ),
  );
}

/**
 * Basic theming function for example page.
 *
 * @param $theme_argument
 *   An argument passed for theming.
 *
 * @return
 *   Output for the screen.
 */
function theme_cfa_example_page_theme($variables = array()) {
  extract($variables);
  $output = '';
  
  $output .= '
    <div class="cfa-example-page-argument">
      ' . $theme_argument . '
    </div>
  ';
  
  return $output;
}

/**
 * Implements hook_permission().
 * http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_permission/7
 *
 * This allows for the module to provide permissions that can
 * be assigned to different roles.  The function user_access can
 * be a quick way to determine a user's access:
 * http://api.drupal.org/api/drupal/modules--user--user.module/function/user_access/7
 */
function cfa_example_permission() {
  return array(
    'cfa example data entry' => array(
      'title' => t('Do CfA Data Entry'), 
      'description' => t('Perform data entry tasks for CfA!  Exciting!'),
    ),
  );
}

/**
 * Form provided through drupal_get_form for CfA Entry.
 * http://api.drupal.org/api/drupal/includes--form.inc/group/form_api/7
 * 
 * Forms are created by structured arrays, where indexes starting 
 * with a hash (#) are properties, while other indexes are new items.
 * This allows for nesting of items.
 *
 * For a complete reference of items and options, see the following:
 * http://api.drupal.org/api/drupal/developer--topics--forms_api_reference.html/7
 */
function cfa_example_data_entry($form, &$form_state) {
  // Main form for data entry.
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('Input a title for this item.  Do not use the word "testing".'),
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  // Let's display the entries that are in the database.
  // Notice how tables are referred to with curly brackets {},
  // as this allows to use table prefixing in Drupal.
  $result = db_query("SELECT cfa_id, title FROM {cfa_example} WHERE title <> :testing ORDER BY cfa_id",
    array(':testing' => 'testing')
  );

  // The above is roughly the same as the following
  $query = db_select('cfa_example', 'cfa'); 
  $query->condition('cfa.title', 'testing', '<>')
    ->fields('cfa', array('cfa_id', 'title'))
    ->orderBy('cfa_id')
    ->range(0, 50);
  $result = $query->execute();

  // Put records into rows for the table theme.
  $rows = array();
  foreach ($result as $record) {
    $row = array();
    $row['cfa_id'] = $record->cfa_id;
    $row['title'] = $record->title;
    $rows[] = $row;
  }

  // This is a form item that is just arbitrary markup.
  $form['table'] = array(
    '#type' => 'item',
    '#markup' => theme('table', array(
      'header' => array(t('ID'), t('Title')),
      'rows' => $rows,
      'attributes' => array('id' => 'cfa-example-table-data'),
    ))
  );
  
  // And finally, for example purposes we will add some Javascript.
  // The first call adds a JS file to be included in the HTML, while
  // the second takes some data and pushes it to the JS to be
  // available to the scripting.
  drupal_add_js(drupal_get_path('module', 'cfa_example') . '/js/cfa_example.table.js');
  drupal_add_js(array('cfa_example' => array('tableID' => 'cfa-example-table-data')), 'setting');

  return $form;
}

/**
 * Form validator for the cfa_example_data_entry form.
 *
 * You can specific specific validation functions if you want
 * but by default, you can just use the same function name
 * with validate at the end.
 */
function cfa_example_data_entry_validate($form, &$form_state) {
  $title = $form_state['values']['title'];
  if ($title == 'testing') {
    form_set_error('title', t('Please do not use word "testing" for the title.'));
  }
}

/**
 * Form submission for the cfa_example_data_entry form.
 *
 * You can specific specific submission functions if you want
 * but by default, you can just use the same function name
 * with validate at the end.
 */
function cfa_example_data_entry_submit($form, &$form_state) {
  // Let's save the values
  $title = $form_state['values']['title'];
  
  // This utilizes the database abstraction layer.  There
  // are links at the top of this file.
  $cfa_id = db_insert('cfa_example')
    ->fields(array('title' => $title))
    ->execute();
    
  // Display a message to the user.
  if (!empty($cfa_id)) {
    drupal_set_message(t('New entry added to database with ID: %id', array('%id' => $cfa_id)), 'status');
  }
  else {
    drupal_set_message(t('There was an issue with saving the entry to the database.'), 'error');
  }
}